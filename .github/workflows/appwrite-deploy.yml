name: Appwrite Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        type: choice
        options:
          - staging
          - production
        default: 'staging'
      
      deploy_type:
        description: 'Deployment Type'
        required: true
        type: choice
        options:
          - functions-only
          - storage-only
          - full-deployment
        default: 'full-deployment'

jobs:
  deploy-appwrite:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Dependencies
        run: |
          npm ci
          
      - name: Build Application
        if: github.event.inputs.deploy_type != 'functions-only'
        run: npm run build
        
      - name: Install Appwrite CLI
        run: |
          npm install -g appwrite-cli
          
      - name: Login to Appwrite
        run: |
          appwrite login \
            --project 68e99f6c000183bafb39 \
            --key ${{ secrets.APPWRITE_API_KEY }}
            
      - name: Deploy Appwrite Functions
        if: github.event.inputs.deploy_type == 'functions-only' || github.event.inputs.deploy_type == 'full-deployment'
        run: |
          # Create function if not exists
          appwrite functions create \
            --functionId=dernekys-${{ github.event.inputs.environment }} \
            --name="Dernek YS ${{ github.event.inputs.environment }}" \
            --runtime=node-18.0 \
            --vars=ENVIRONMENT=${{ github.event.inputs.environment }} \
            --vars=API_KEY=${{ secrets.APPWRITE_API_KEY }} \
            --vars=PROJECT_ID=68e99f6c000183bafb39 \
            --vars=DATABASE_ID=dernek_yonetim_db \
            || echo "Function already exists, updating..."
            
          # Deploy function code
          if [ -d "./functions" ]; then
            appwrite functions createDeployment \
              --functionId=dernekys-${{ github.event.inputs.environment }} \
              --activate=true \
              --code=./functions
          fi
          
      - name: Deploy Static Files to Storage
        if: github.event.inputs.deploy_type == 'storage-only' || github.event.inputs.deploy_type == 'full-deployment'
        run: |
          # Create storage bucket if not exists
          BUCKET_NAME="${{ github.event.inputs.environment }}-files"
          appwrite storage createBucket \
            --bucketId=$BUCKET_NAME \
            --name="${{ github.event.inputs.environment }} Files" \
            --permissions="read('any')" \
            --fileSecurity=true \
            --maximumFileSize=10485760 \
            --allowedFileExtensions="html,css,js,png,jpg,jpeg,gif,svg,ico,json" \
            || echo "Bucket already exists"
            
          # Upload built files
          if [ -d "./dist" ]; then
            # Create archive of dist folder
            tar -czf dist.tar.gz -C ./dist .
            
            # Upload to storage
            appwrite storage createFile \
              --bucketId=$BUCKET_NAME \
              --fileId=${{ github.event.inputs.environment }}-$(date +%s) \
              --file=./dist.tar.gz
              
            echo "âœ… Static files uploaded to $BUCKET_NAME bucket"
          fi
          
      - name: Setup Appwrite Collections
        if: github.event.inputs.deploy_type == 'full-deployment'
        run: |
          # Create collections if not exist
          echo "Setting up database collections..."
          
          # Beneficiaries collection
          appwrite databases createCollection \
            --databaseId=dernek_yonetim_db \
            --collectionId=beneficiaries \
            --name="Beneficiaries" \
            --permissions="read('any'),create('users'),update('users'),delete('users')" \
            || echo "Beneficiaries collection already exists"
            
          # Donations collection
          appwrite databases createCollection \
            --databaseId=dernek_yonetim_db \
            --collectionId=donations \
            --name="Donations" \
            --permissions="read('any'),create('users'),update('users'),delete('users')" \
            || echo "Donations collection already exists"
            
          # Messages collection
          appwrite databases createCollection \
            --databaseId=dernek_yonetim_db \
            --collectionId=messages \
            --name="Messages" \
            --permissions="read('any'),create('users'),update('users'),delete('users')" \
            || echo "Messages collection already exists"
            
          echo "âœ… Database collections setup completed"
          
      - name: Run Health Check
        run: |
          # Wait for deployment to be ready
          sleep 10
          
          # Test function endpoint
          FUNCTION_URL="https://fra.cloud.appwrite.io/v1/functions/68e99f6c000183bafb39/dernekys-${{ github.event.inputs.environment }}"
          echo "Testing function endpoint: $FUNCTION_URL"
          
          # Basic connectivity test
          curl -f "$FUNCTION_URL" || echo "Function endpoint test failed"
          
          # Test storage access
          STORAGE_URL="https://fra.cloud.appwrite.io/v1/storage/68e99f6c000183bafb39/${{ github.event.inputs.environment }}-files"
          echo "Testing storage endpoint: $STORAGE_URL"
          
          echo "âœ… Health check completed"
          
      - name: Deployment Summary
        run: |
          echo "## ðŸš€ Appwrite Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | URL |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| Function | âœ… Deployed | \`https://fra.cloud.appwrite.io/v1/functions/68e99f6c000183bafb39/dernekys-${{ github.event.inputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Storage | âœ… Deployed | \`https://fra.cloud.appwrite.io/v1/storage/68e99f6c000183bafb39/${{ github.event.inputs.environment }}-files\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Database | âœ… Configured | \`https://fra.cloud.appwrite.io/v1/databases/68e99f6c000183bafb39\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Type**: ${{ github.event.inputs.deploy_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
