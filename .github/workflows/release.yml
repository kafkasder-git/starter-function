name: Release Pipeline

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Generate Changelog
        id: changelog
        run: |
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          # Generate changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" --max-count=20 >> CHANGELOG.md
          fi
          
          # Output changelog for GitHub release
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            ```bash
            npm install
            npm run build
            ```
            
            ## Deployment
            This release is automatically deployed to production.
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
          
  build-and-deploy:
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Run Tests
        run: npm run test:coverage
        
      - name: Build Application
        run: npm run build
        
      - name: Deploy to Appwrite Functions Production
        run: |
          # Install Appwrite CLI
          npm install -g appwrite-cli
          
          # Login to Appwrite
          appwrite login --project 68e99f6c000183bafb39
          
          # Deploy function for production
          appwrite functions create \
            --functionId=dernekys-production \
            --name="Dernek YS Production ${{ github.ref_name }}" \
            --runtime=node-18.0 \
            --vars=ENVIRONMENT=production \
            --vars=VERSION=${{ github.ref_name }} \
            --vars=API_KEY=${{ secrets.APPWRITE_API_KEY }}
            
          # Deploy static files to Appwrite Storage
          appwrite storage createFile \
            --bucketId=production-files \
            --fileId=${{ github.ref_name }} \
            --file=./dist
          
      - name: Health Check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          curl -f https://fra.cloud.appwrite.io/v1/functions/68e99f6c000183bafb39/dernekys-production/executions || exit 1
          
      - name: Update Release with Deployment Info
        uses: actions/github-script@v6
        with:
          script: |
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }}
            });
            
            const updatedBody = release.body + `
            
            ## Deployment Status
            ‚úÖ Successfully deployed to production
            üåê URL: https://fra.cloud.appwrite.io/v1/functions/68e99f6c000183bafb39/dernekys-production
            üìä Health Check: Passed
            `;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              body: updatedBody
            });
